#!/usr/bin/env ruby

require 'optparse'
require './todoEr.rb'

options = {:file => "#{ENV["HOME"]}/.todo.json"}

opts = OptionParser.new do |opts|
    opts.banner = "Usage: todo [options]"

    opts.on("-f", "--file PATH", "json formated todo list") do |f|
        options[:file] = f 
    end

    opts.on("-t", "--type [Daily|Due|Weekly|Check]", "Type of event") do |t|
        options[:type] = t 
    end

    opts.on("-e", "--event \"Event\"", "Todo Event") do |e|
        options[:event] = e 
    end

    opts.on("-d", "--date yyyy/mm/dd", "Todo Event Due Date") do |d|
        options[:date] = d 
    end

    opts.on("-s", "--time hour", "Todo Event hour of day") do |s|
        options[:time] = s 
    end

    opts.on("-p", "--print", "print todo") do |p|
        options[:print] = true 
    end

    opts.on("-h", "--help", "Show this message") do
        puts opts
        exit
    end
    opts.on("-a", "--add", "add event, define event with -e") do
        options[:add] = true
    end

    opts.on("-c", "--mark-complete", "mark event as complete define event with -e") do
        options[:complete] = true
    end

    opts.on("-l", "--mark-late-complete", "mark event as complete late define event with -e") do
        options[:lcomplete] = true
    end
    
end
#puts opts 
opts.parse!

if options.length == 1
    puts opts
    exit
end

todo_list = ToDo::ListHandle.new(options[:file])


if options.has_key? :print
    todo_list.print_list
end

if options.has_key? :add 
    if options.has_key? :event
        if options.has_key? :type
            type = options[:type]
            if options.has_key? :date 
                date = options[:date]
            else
                date = nil
            end
        else
            type = "Daily"
        end
        if options.has_key? :time
            time = options[:time].to_i 
        else 
            time = 0
        end
        todo_list.add_todo options[:event], time, type, date
    else 
        puts opts
        exit
    end
end 

if options.has_key? :complete
    if options.has_key? :event 
        todo_list.mark_complete options[:event]
    else
        puts  opts
        exit
    end
end